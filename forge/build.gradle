plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

loom {
    forge {
        mixinConfig "cwthrusters-common.mixins.json"
        mixinConfig "cwthrusters.mixins.json"
        convertAccessWideners.set(true)
        extraAccessWideners.add loom.getAccessWidenerPath().asFile.toString()
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven { // Create Forge and Registrate Forge
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    modApi("org.valkyrienskies:valkyrienskies-120-forge:$vs2_version") { transitive = false }

    implementation("org.valkyrienskies.core:api:$vs_core_version") { transitive = false }
    implementation("org.valkyrienskies.core:api-game:$vs_core_version") { transitive = false }
    implementation("org.valkyrienskies.core:util:$vs_core_version") { transitive = false }
    implementation("org.valkyrienskies.core:impl:$vs_core_version") { transitive = false }

    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:${registrate_forge_version}")
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${flywheel_forge_minecraft_version}:${flywheel_forge_version}")

    // Clockwork Forge
    modImplementation(files("../libs/${clockwork_forge_version}.jar"))

    compileOnly("io.github.llamalad7:mixinextras-common:${mixinextras_version}")
    annotationProcessor(implementation(include("io.github.llamalad7:mixinextras-forge:${mixinextras_version}")))

    implementation("org.joml:joml:1.10.5")
    implementation("org.joml:joml-primitives:1.10.0")

    // CWThrusters does not use Kotlin, but VS2 and Clockwork do.
    implementation "thedarkcolour:kotlinforforge:$forge_kotlin_version"

    // Development QOL
    modCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnly("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
